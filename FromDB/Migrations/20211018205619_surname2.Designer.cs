// <auto-generated />
using System;
using FromDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FromDB.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20211018205619_surname2")]
    partial class surname2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.utf8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FromDB.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PersonId" }, "IX_Addresses_PersonId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FromDB.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FromDB.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("FromDB.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentDepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CurrentDepartmentId" }, "IX_Persons_CurrentDepartmentId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FromDB.PersonHobby", b =>
                {
                    b.Property<int>("HobbiesId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonsId")
                        .HasColumnType("integer");

                    b.HasKey("HobbiesId", "PersonsId");

                    b.HasIndex(new[] { "PersonsId" }, "IX_PersonHobbies_PersonsId");

                    b.ToTable("PersonHobbies");
                });

            modelBuilder.Entity("FromDB.Address", b =>
                {
                    b.HasOne("FromDB.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("FromDB.Address", "PersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FromDB.Person", b =>
                {
                    b.HasOne("FromDB.Department", "CurrentDepartment")
                        .WithMany("People")
                        .HasForeignKey("CurrentDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentDepartment");
                });

            modelBuilder.Entity("FromDB.PersonHobby", b =>
                {
                    b.HasOne("FromDB.Hobby", "Hobbies")
                        .WithMany("PersonHobbies")
                        .HasForeignKey("HobbiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FromDB.Person", "Persons")
                        .WithMany("PersonHobbies")
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hobbies");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("FromDB.Department", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("FromDB.Hobby", b =>
                {
                    b.Navigation("PersonHobbies");
                });

            modelBuilder.Entity("FromDB.Person", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("PersonHobbies");
                });
#pragma warning restore 612, 618
        }
    }
}
